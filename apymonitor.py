from datetime import datetime
from xml.dom import minidom
import traceback
import argparse
import logging
import sys

import pefile


extra_header = """
-
This document was generated by Apymonitor.
{} UTC
A python project which generates a valid APIMonitor XML document with a PE as input.
More info: github.com/felipetarijon/apymonitor""".format(datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S'))


def get_header(extra=extra_header):
    return """<?xml version="1.0"?>
<!--
API Monitor Filter
(c) 2010-2013, Rohitab Batra <rohitab@rohitab.com>
http://www.rohitab.com/apimonitor/{}
-->\n""".format(extra)


def get_pe_imports(pe_file_path: str):
    pe = pefile.PE(pe_file_path)
    imports = {}
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        imports[entry.dll.decode()] = [imp.name.decode() for imp in entry.imports]
    return imports


def get_pe_api_filters(pe_file_path: str):
    pe_imports = get_pe_imports(pe_file_path)

    doc = minidom.Document()

    root = doc.createElement('ApiMonitor')
    doc.appendChild(root)

    capture_filter = doc.createElement('CaptureFilter')
    root.appendChild(capture_filter)

    for dll in pe_imports:
        module = doc.createElement('Module')
        module.setAttribute('Name', dll)

        capture_filter.appendChild(module)
        
        for api_func in pe_imports[dll]:
            api = doc.createElement('Api')
            api.setAttribute('Name', api_func)

            module.appendChild(api)

    return root.toprettyxml()


if __name__ == '__main__':
    log_format = '[%(levelname)s] %(message)s'
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(logging.Formatter(log_format))
    console_handler.setLevel(logging.INFO)
    logger.addHandler(console_handler)

    # argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input",
                        help="Input file path", type=str)
    parser.add_argument("-o", "--output",
                        help="Output path", type=str)
    parser.add_argument("-s", "--silent", help="Do not output into stdout", action="store_true")
    parser.add_argument("-E", "--no-extra-header", help="Do not output with extra header", action="store_true")

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args()

    pe_filters = get_pe_api_filters(args.input)
    xml_header = get_header()

    if args.no_extra_header:
        xml_header = get_header(extra="")

    if args.output:
        with open(args.output, "w+") as output_file:
            output_file.write(xml_header + pe_filters)
            output_file.close()
    
    if not args.silent:
        print(pe_filters)

